[{"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\index.js":"1","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\reportWebVitals.js":"2","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\App.js":"3","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\pages\\HomePage.js":"4","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\pages\\LoginPage.js":"5","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\pages\\WatchlistPage.js":"6","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\pages\\MarketPage.js":"7","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\StockappNavbar.js":"8","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\pages\\SignupPage.js":"9","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\LiveSearchBox.js":"10","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\TickerCard.js":"11","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\MarketsView.js":"12","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\ExchangeView.js":"13","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\TickerView.js":"14","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\TickerBasic.js":"15","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\utils\\handleTime.js":"16","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\HomeView.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":2127,"mtime":1611668601756,"results":"21","hashOfConfig":"19"},{"size":4915,"mtime":1611905493297,"results":"22","hashOfConfig":"19"},{"size":2284,"mtime":1611227786740,"results":"23","hashOfConfig":"19"},{"size":6820,"mtime":1611656906383,"results":"24","hashOfConfig":"19"},{"size":2516,"mtime":1611869983954,"results":"25","hashOfConfig":"19"},{"size":1175,"mtime":1611217422318,"results":"26","hashOfConfig":"19"},{"size":212,"mtime":1611216511796,"results":"27","hashOfConfig":"19"},{"size":2736,"mtime":1611229216605,"results":"28","hashOfConfig":"19"},{"size":3741,"mtime":1611866979658,"results":"29","hashOfConfig":"19"},{"size":2920,"mtime":1611905791258,"results":"30","hashOfConfig":"19"},{"size":10492,"mtime":1611829597192,"results":"31","hashOfConfig":"19"},{"size":15069,"mtime":1611826617516,"results":"32","hashOfConfig":"19"},{"size":1819,"mtime":1611867761074,"results":"33","hashOfConfig":"19"},{"size":1258,"mtime":1611824187353,"results":"34","hashOfConfig":"19"},{"size":1481,"mtime":1611865669982,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1v5l073",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\index.js",[],["77","78"],"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\reportWebVitals.js",[],"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\App.js",[],"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\pages\\HomePage.js",["79"],"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\pages\\LoginPage.js",["80","81"],"import React from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport users from '../data/users.json';\r\n\r\nclass LoginPage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        // Controlled component steps\r\n        // 1. Add key to state\r\n        // 2. map to value\r\n        // 3. update using onChange\r\n        this.state = {\r\n            email: '',\r\n            pwd: ''\r\n        }\r\n    }\r\n    validateLogin = () => {\r\n        for( let i = 0; i< users.length; i++) {\r\n            if( users[i].pwd == this.state.pwd && users[i].email == this.state.email) {\r\n                this.props.handleLogin(users[i]);\r\n                window.location = '/#/watchlist'\r\n                return;\r\n                // We will login the user\r\n                // return the found user\r\n            }\r\n        // alert that the user does not exist\r\n        }\r\n        alert('user not found');\r\n    }\r\n    render() {\r\n        // Steps to login\r\n        // 1. if the user exists in the user.json?\r\n        // 2. if the user password matches\r\n        // 3. update the activeUser state in <App> (using handleLogin() prop)\r\n        return (\r\n            <div className=\"c-login-page\">\r\n                <h1>Login</h1>\r\n            <Form>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control type=\"email\" \r\n                onChange={(event) => {this.setState({email: event.target.value})}} \r\n                placeholder=\"Enter email\" value={this.state.email} />\r\n                </Form.Group>\r\n                \r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control type=\"password\"\r\n                 onChange={(event) => {this.setState({pwd: event.target.value})}} \r\n                 placeholder=\"Password\"  value={this.state.pwd}/>\r\n                </Form.Group>\r\n                <Button onClick={this.validateLogin} block variant=\"success\" type=\"button\">\r\n                Login\r\n                </Button>\r\n            </Form> \r\n            <br/>\r\n            <a href=\"/#/signup\">To Signup</a>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n    export default LoginPage;","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\pages\\WatchlistPage.js",["82"],"import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport LiveSearchBox from '../components/LiveSearchBox';\r\nimport TickerCard from '../components/TickerCard'\r\nimport tickerJSON from '../data/tickers.json';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nclass WatchlistPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let myTickers;\r\n        if(localStorage.getItem('localTickers')){\r\n        myTickers = JSON.parse(localStorage.getItem('localTickers'));\r\n        }\r\n        else{\r\n        myTickers = tickerJSON;\r\n        }\r\n        this.state = {\r\n            results: [],\r\n            selectedTickers: [],\r\n            symbolResults: [],\r\n            myTickers: myTickers,\r\n            index: ''\r\n        };\r\n    }\r\n    addTicker = (index) => {\r\n        const ticker = this.state.results[index];\r\n        const ticker_symbol = this.state.symbolResults[index];\r\n        console.log('ticker_symbol', ticker_symbol);\r\n        axios.get(`http://api.marketstack.com/v1/intraday/latest?access_key=43d9fceee09a8d4b8113b69f9214c110&symbols=${ticker_symbol}`)\r\n            .then((res) => {\r\n                \r\n                const open = res.data.data.map( (item) => {\r\n                    return item.open;\r\n                })\r\n                const close = res.data.data.map( (item) => {\r\n                    return item.close;\r\n                })\r\n                const high = res.data.data.map( (item) => {\r\n                    return item.high;\r\n                })\r\n                const low = res.data.data.map( (item) => {\r\n                    return item.low;\r\n                })\r\n                const volume = res.data.data.map( (item) => {\r\n                    return item.volume;\r\n                })\r\n                const last = res.data.data.map( (item) => {\r\n                    return item.last;\r\n                })\r\n                // const open = res.data.open;\r\n                // const high =res.data.high;\r\n                // const low =res.data.low;\r\n                // const close =res.data.close;\r\n                // const volume =res.data.volume;\r\n                // console.log('res.data.open', res.data.open);\r\n                \r\n                const newTickers = this.state.myTickers.concat({symbol: ticker_symbol, name: ticker, \r\n                    open: open, close: close, high: high, low: low, volume: volume, last: last})\r\n                localStorage.setItem('localTickers', JSON.stringify(newTickers))\r\n\r\n                this.setState({\r\n                    selectedTickers: this.state.selectedTickers.concat({symbol: ticker_symbol, name: ticker, \r\n                        open: open, close: close, high: high, low: low, volume: volume, last: last}),\r\n                    results: [],\r\n                    myTickers: newTickers\r\n                });\r\n                console.log('foooo', this.state.selectedTickers);\r\n            });\r\n    };\r\n    searchTickers = (searchText) => {\r\n        if( ! searchText ) {\r\n            this.setState({\r\n                results: []\r\n            })\r\n            return;\r\n        };\r\n        // Array.filter -> An array method\r\n        // Takes a callback\r\n        // for each item in the array -> the callback is run with a different item\r\n        // if the callback returns true, the item stays\r\n        // if false it is not in the new array\r\n        // Returns a new filtered array, does not effect the original array\r\n        \r\n        // const searchResults = this.staticActorsJson.filter( (actor) => {\r\n        //     return actor.toLowerCase().includes(searchText.toLowerCase());\r\n        // })\r\n        axios.get(`http://api.marketstack.com/v1/tickers?access_key=43d9fceee09a8d4b8113b69f9214c110&search=${searchText}`)\r\n            .then((res) => {\r\n                const names = res.data.data.map( (item) => {\r\n                    return item.name;\r\n                })\r\n                const symbols = res.data.data.map( (item) => {\r\n                    return item.symbol;\r\n                })\r\n                this.setState({\r\n                    results: names,\r\n                    symbolResults: symbols,\r\n                    selectedTickers: []\r\n                })\r\n                console.log('symbolresults', symbols)\r\n            });\r\n    };\r\n    // removeTicker = () => {\r\n    //     this.state.myTickers.splice(this.index, 1);\r\n    //     localStorage.setItem('localTickers', JSON.stringify(this.state.myTickers));\r\n    //     // localStorage.removeItem('localTickers');\r\n    //     this.setState({\r\n    //         myTickers: JSON.parse(localStorage.getItem('localTickers'))\r\n    //     });\r\n    // };\r\n    removeTicker = (symbol) => {\r\n        const filteredTickers = this.state.myTickers.filter( (item) => {\r\n            if(item.symbol !== symbol){\r\n                return true;\r\n            }\r\n        });\r\n        console.log('filteredTickers', filteredTickers)\r\n        localStorage.setItem('localTickers', JSON.stringify(filteredTickers));\r\n        // localStorage.removeItem('localTickers');\r\n        this.setState({\r\n            myTickers: JSON.parse(localStorage.getItem('localTickers'))\r\n        });\r\n    };\r\n    render() {\r\n        if( ! this.props.activeUser){\r\n            return <Redirect push to=\"/login\" />\r\n        }\r\n        let tickerCards;\r\n        if(this.state.myTickers){\r\n            tickerCards = this.state.myTickers.map( (ticker, index) => {\r\n                return <TickerCard tickerName={ticker.name} tickerSymbol={ticker.symbol} tickerOpen={ticker.open} \r\n                tickerClose={ticker.close} tickerHigh={ticker.high} tickerLow={ticker.low}\r\n                tickerVolume={ticker.volume} tickerLast={ticker.last} \r\n                removeTicker={() => this.removeTicker(ticker.symbol)}></TickerCard>\r\n                \r\n            });\r\n        }\r\n        else{\r\n            tickerCards = this.state.selectedTickers.map( (ticker, index) => {\r\n                return <TickerCard tickerName={ticker.name} tickerSymbol={ticker.symbol} tickerOpen={ticker.open} \r\n                tickerClose={ticker.close} tickerHigh={ticker.high} tickerLow={ticker.low}\r\n                tickerVolume={ticker.volume} tickerLast={ticker.last}> </TickerCard>\r\n                \r\n            });\r\n        }\r\n        return (\r\n                <div className=\"c-watchlist-page\">\r\n                <LiveSearchBox \r\n                searchTextChanged={this.searchTickers}\r\n                resultSelected={this.addTicker}\r\n                placeholderText=\"Symbol/Company/Index\" \r\n                results={this.state.results} />\r\n                \r\n                <div>\r\n                <Row>\r\n                    {tickerCards}\r\n                </Row>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default WatchlistPage;","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\pages\\MarketPage.js",[],"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\StockappNavbar.js",[],"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\pages\\SignupPage.js",[],"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\LiveSearchBox.js",[],"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\TickerCard.js",["83","84"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './TickerCard.css';\r\n\r\nclass TickerCard extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        last: '',\r\n        open: '', \r\n        close: '', \r\n        high: '', \r\n        low: '', \r\n        volume: ''\r\n      };\r\n    }\r\n    handleClick = (symbol) => {\r\n        console.log('handleClick', symbol);\r\n        // return <Redirect push to=\"/\" />\r\n        window.location = \"/#/watchlist/\" + symbol;\r\n    };\r\n    calcChange = (last, close) => {\r\n        return (last/close*100 -100).toFixed(2);\r\n    };\r\n    render(){\r\n        let chng = this.calcChange(this.state.last, this.state.close);\r\n        const tickerCardInfo = <Col xs={12} lg={3}>\r\n            <Card style={{ width: '18rem' }}>\r\n            <Card.Header as=\"h6\" onClick={() => this.handleClick(this.props.tickerSymbol)}>\r\n                {this.props.tickerSymbol}\r\n                <p></p>\r\n                <Card.Text style={{ fontSize: '16px' }}>{this.props.tickerName}</Card.Text>\r\n                <Card.Header as=\"h4\">{this.state.last}\r\n                    <span style={{ paddingLeft: '3rem', fontSize: '16px' }}>{chng}%</span></Card.Header>\r\n                </Card.Header>\r\n                <Card.Body onClick={() => this.handleClick(this.props.tickerSymbol)} className=\"card-body\">\r\n                <Card.Text>Open<span style={{ paddingLeft: '4.55rem' }}>{this.state.open}</span></Card.Text>\r\n                <Card.Text>Previous Close<span style={{ paddingLeft: '1.085rem' }}>{this.state.close}</span></Card.Text>\r\n                <Card.Text>Day Range<span style={{ paddingLeft: '2.65rem' }}>{this.state.low} - {this.state.high}</span></Card.Text>\r\n                <Card.Text>Volume<span style={{ paddingLeft: '4rem' }}>{this.state.volume}</span></Card.Text>\r\n                </Card.Body>\r\n                {/* <Button variant=\"outline-secondary\" size=\"sm\" onClick={() => {localStorage.removeItem('localTickers')}}>remove</Button> */}\r\n                <Button variant=\"outline-secondary\" size=\"sm\" onClick={this.props.removeTicker}>remove</Button>\r\n            \r\n        </Card>\r\n        </Col>\r\n\r\n        return ( \r\n        <div>\r\n            <div className=\"tickerInfo\">\r\n                {tickerCardInfo}\r\n          </div>\r\n          \r\n        </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        axios.get(`http://api.marketstack.com/v1/intraday/latest?access_key=43d9fceee09a8d4b8113b69f9214c110&symbols=${this.props.tickerSymbol}&interval=1min`)\r\n            .then((res) => {\r\n                const open = res.data.data.map( (item) => {\r\n                    return item.open;\r\n                })\r\n                const close = res.data.data.map( (item) => {\r\n                    return item.close;\r\n                })\r\n                const high = res.data.data.map( (item) => {\r\n                    return (item.high).toFixed(2);\r\n                })\r\n                const low = res.data.data.map( (item) => {\r\n                    return item.low;\r\n                })\r\n                const volume = res.data.data.map( (item) => {\r\n                    return item.volume;\r\n                })\r\n                const last = res.data.data.map( (item) => {\r\n                    return item.last;\r\n                })\r\n\r\n                this.setState({\r\n\t\t\t\t\tlast: last,\r\n                    open: open, \r\n                    close: close, \r\n                    high: high, \r\n                    low: low, \r\n                    volume: volume\r\n                });\r\n            });\r\n      }\r\n}\r\n\r\nexport default TickerCard;","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\MarketsView.js",["85","86","87"],"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\ExchangeView.js",["88","89","90"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Col, Container, Row, Table } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport {withRouter} from 'react-router';\r\nimport {Line} from 'react-chartjs-2';\r\nimport { getCurrentDate, calcDayHours, calcWeekDays, calcMonthDays, calcYearDays } from \"../utils/handleTime\"\r\n\r\nclass ExchangeComp extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.datasets = {\r\n        label: '',\r\n        fill: true,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10\r\n      }\r\n      this.state = {\r\n          result: '',\r\n          symbol: this.props.match.params.symbol,\r\n          name: '',\r\n          country: '',\r\n          open: '', \r\n          close: '', \r\n          high: '', \r\n          low: '', \r\n          volume: '',\r\n          last: '',\r\n          chartData: ''\r\n      };\r\n    };\r\n    calcChange = (last, close) => {\r\n        return (last/close*100 -100).toFixed(2);\r\n    };\r\n    render(){\r\n        // const exchangeCardInfo = <Col xs={12} lg={12}>\r\n        // <Card border=\"dark\" className=\"text-center\">\r\n        // <Card.Header as=\"h4\">{this.state.symbol}</Card.Header>\r\n        //     <Card.Body>\r\n        //         <Card.Title>{this.state.name} ({this.state.country})</Card.Title>\r\n        //         <Card.Text>Open: {this.state.open}</Card.Text>\r\n        //         <Card.Text>Previous Close: {this.state.close}</Card.Text>\r\n        //         <Card.Text>Day Range: {this.state.low} - {this.state.high}</Card.Text>\r\n        //         <Card.Text>Volume: {this.state.volume}</Card.Text>\r\n        //     </Card.Body>\r\n        //     </Card>\r\n        // </Col>\r\n        let chng = this.calcChange(this.state.close, this.state.open);\r\n        const exchangeCardInfo = <Col xs={12} lg={12}>\r\n        <Card border=\"dark\">\r\n            <Card.Header as=\"h4\">{this.state.symbol}\r\n                <p></p>\r\n                <Card.Header as=\"h4\">{this.state.close}\r\n                <span style={{ paddingLeft: '1.5rem', fontSize: '14px' }}>{chng}%</span>\r\n                </Card.Header>\r\n            </Card.Header>\r\n            <Card.Body>\r\n            {this.state.chartData && <Line data={this.state.chartData} />}\r\n                <div className=\"chart-btns\">\r\n                    <Button variant=\"outline-secondary\" size=\"sm\" onClick={() => this.weekChart()}>WEEK</Button>\r\n                    <Button variant=\"outline-secondary\" size=\"sm\" onClick={() => this.monthChart()}>MONTH</Button>\r\n                    <Button variant=\"outline-secondary\" size=\"sm\" onClick={() => this.yearChart()}>YEAR</Button>\r\n                </div>\r\n                <Table striped>\r\n                    <thead>\r\n                        <tr>\r\n                        <th>{this.state.name}</th>\r\n                        <th>({this.state.country})</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                        <td>Open</td>\r\n                        <td>{this.state.open}</td>\r\n                        </tr>\r\n                        <tr>\r\n                        <td>Close</td>\r\n                        <td>{this.state.close}</td>\r\n                        </tr>\r\n                        <tr>\r\n                        <td>Day Range</td>\r\n                        <td>{this.state.low} - {this.state.high}</td>\r\n                        </tr>\r\n                        <tr>\r\n                        <td>Volume</td>\r\n                        <td>{this.state.volume}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n            </Card>\r\n        </Col>\r\n        return ( \r\n        <div>\r\n            <div className=\"gallery\">\r\n            <Container>\r\n                {exchangeCardInfo}\r\n            </Container>\r\n          </div>\r\n        </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        axios.get(`http://api.marketstack.com/v1/eod/latest?access_key=43d9fceee09a8d4b8113b69f9214c110&symbols=${this.state.symbol}`)\r\n            .then( (res) => {\r\n                console.log('marketPage', res.data);\r\n                const open = res.data.data[0].open;\r\n                const high =res.data.data[0].high;\r\n                const low =res.data.data[0].low;\r\n                const close =res.data.data[0].close;\r\n                const volume =res.data.data[0].volume;\r\n                console.log('res.data.open', open);\r\n                this.setState({\r\n                    open: open, \r\n                    close: close, \r\n                    high: high, \r\n                    low: low, \r\n                    volume: volume\r\n                });\r\n        })\r\n        .catch(err => {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        });\r\n        axios.get(`http://api.marketstack.com/v1/tickers/${this.state.symbol}?access_key=43d9fceee09a8d4b8113b69f9214c110`).then( (res) => {\r\n    \r\n          console.log('exchangeName', res.data.name)\r\n          this.setState({\r\n              name: res.data.name,\r\n              country: res.data.country\r\n            });\r\n        });\r\n    }\r\n    weekChart = () => {\r\n        axios.get(`http://api.marketstack.com/v1/tickers/${this.state.symbol}/eod?access_key=43d9fceee09a8d4b8113b69f9214c110&limit=7`)\r\n            .then( (res) => {\r\n                const last = res.data.data.eod.map( (item) => {\r\n                    return item.close;\r\n                })\r\n                console.log('lastWeek', last)\r\n                this.setState({\r\n                    last: last,\r\n                    chartData: {\r\n                        labels: [calcWeekDays(-7), calcWeekDays(-6), calcWeekDays(-5), calcWeekDays(-4), \r\n                                  calcWeekDays(-3), calcWeekDays(-2), calcWeekDays(-1)],\r\n                        datasets: [\r\n                          {\r\n                            ...this.datasets,\r\n                            data: last.reverse()\r\n                          }\r\n                        ]\r\n                      }\r\n                });\r\n        })\r\n        .catch(err => {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        });\r\n    };\r\n    monthChart = () => {\r\n        axios.get(`http://api.marketstack.com/v1/tickers/${this.state.symbol}/eod?access_key=43d9fceee09a8d4b8113b69f9214c110&limit=30`)\r\n            .then( (res) => {\r\n                const last = res.data.data.eod.map( (item) => {\r\n                    return item.close;\r\n                })\r\n                console.log('lastMonth', last)\r\n                this.setState({\r\n                    last: last,\r\n                    chartData: {\r\n                        labels: [calcMonthDays(-27), calcMonthDays(-22), calcMonthDays(-17), calcMonthDays(-12), \r\n                                  calcMonthDays(-7), calcMonthDays(-2), calcMonthDays(5)],\r\n                        datasets: [\r\n                          {\r\n                            ...this.datasets,\r\n                            data: last.reverse()\r\n                          }\r\n                        ]\r\n                      }\r\n                });\r\n        })\r\n        .catch(err => {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        });\r\n    };\r\n    yearChart = () => {\r\n        axios.get(`http://api.marketstack.com/v1/tickers/${this.state.symbol}/eod?access_key=43d9fceee09a8d4b8113b69f9214c110&limit=365`)\r\n            .then( (res) => {\r\n                const last = res.data.data.eod.map( (item) => {\r\n                    return item.close;\r\n                })\r\n                console.log('lastMonth', last)\r\n                this.setState({\r\n                    last: last,\r\n                    chartData: {\r\n                        labels: [calcYearDays(-12, 0), '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', calcYearDays(-10, 10), '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',  \r\n                                calcYearDays(-8, 10), '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', calcYearDays(-6, 10), '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',  \r\n                                  calcYearDays(-4, 10), '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', calcYearDays(-2, 10), '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', \r\n                                  calcYearDays(0, 29), '', '', '', '', '', '', '', '', '', ''],\r\n                        datasets: [\r\n                          {\r\n                            ...this.datasets,\r\n                            data: last.reverse()\r\n                          }\r\n                        ]\r\n                      }\r\n                });\r\n        })\r\n        .catch(err => {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(ExchangeComp);","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\TickerView.js",["91"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Col, Container, Row, Table } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport {withRouter} from 'react-router';\r\nimport {Line} from 'react-chartjs-2';\r\nimport { getCurrentDate, calcDayHours, calcWeekDays, calcMonthDays, calcYearDays } from \"../utils/handleTime\"\r\n\r\nclass TickerComp extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.datasets = {\r\n        label: '',\r\n        fill: true,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10\r\n      }\r\n      this.state = {\r\n          result: '',\r\n          symbol: this.props.match.params.symbol,\r\n          name: '',\r\n          open: '', \r\n          close: '', \r\n          high: '', \r\n          low: '', \r\n          volume: '',\r\n          last1: '',\r\n          last: '',\r\n          chartData: ''\r\n      };\r\n    };\r\n  //   getCurrentDate = (offset) => {\r\n  //       let date = new Date();\r\n  //       let previousDay = new Date(date.setDate(date.getDate() + offset));\r\n\r\n  //       return previousDay.toISOString().slice(0,10);\r\n  //   };\r\n  //   calcDayHours = (offsetHrs, offsetMins) => {\r\n  //       let date = new Date();\r\n  //       let previousHour = new Date(date.setHours(date.getHours() + offsetHrs, offsetMins));\r\n        \r\n  //       return previousHour.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\r\n  //   };\r\n  //   calcWeekDays = (offset) => {\r\n  //     let date = new Date();\r\n  //     let previousDay = new Date(date.setDate(date.getDate() + offset));\r\n      \r\n  //     return previousDay.toLocaleString('en-US', { month: 'short', day: 'numeric' })\r\n  // };\r\n  //   calcMonthDays = (offsetDays) => {\r\n  //       let date = new Date();\r\n  //       let previousDay = new Date(date.setMonth(date.getMonth(), offsetDays));\r\n        \r\n  //       return previousDay.toLocaleString('en-US', { month: 'short', day: 'numeric' })\r\n  //   };\r\n  //   calcYearDays = (offsetMonth, offsetDays) => {\r\n  //     let date = new Date();\r\n  //     let previousDay = new Date(date.setFullYear(date.getFullYear(), date.getMonth() + offsetMonth, offsetDays));\r\n      \r\n  //     return previousDay.toLocaleString('en-US', { month: 'short', year: 'numeric' })\r\n  // };\r\n    calcChange = (last, close) => {\r\n        return (last/close*100 -100).toFixed(2);\r\n    };\r\n    render(){\r\n        let chng = this.calcChange(this.state.last1, this.state.close);\r\n        const exchangeCardInfo = <Col xs={12} lg={12}>\r\n        <Card>\r\n        <Card.Header as=\"h6\">{this.state.name}\r\n            <p></p>\r\n            <Card.Header as=\"h4\">{this.state.last1}\r\n            <span style={{ paddingLeft: '1.5rem', fontSize: '14px' }}>{chng}%</span>\r\n            </Card.Header>\r\n        </Card.Header>\r\n            <Card.Body>\r\n                {this.state.chartData && <Line data={this.state.chartData} />}\r\n                <div className=\"chart-btns\">\r\n                    <Button variant=\"outline-secondary\" size=\"sm\" onClick={() => this.dayChart()}>DAY</Button>\r\n                    <Button variant=\"outline-secondary\" size=\"sm\" onClick={() => this.weekChart()}>WEEK</Button>\r\n                    <Button variant=\"outline-secondary\" size=\"sm\" onClick={() => this.monthChart()}>MONTH</Button>\r\n                    <Button variant=\"outline-secondary\" size=\"sm\" onClick={() => this.yearChart()}>YEAR</Button>\r\n                </div>\r\n                <Table striped>\r\n                    <tbody>\r\n                        <tr>\r\n                        <td>Open</td>\r\n                        <td>{this.state.open}</td>\r\n                        </tr>\r\n                        <tr>\r\n                        <td>Previous Close</td>\r\n                        <td>{this.state.close}</td>\r\n                        </tr>\r\n                        <tr>\r\n                        <td>Day Range</td>\r\n                        <td>{this.state.low} - {this.state.high}</td>\r\n                        </tr>\r\n                        <tr>\r\n                        <td>Volume</td>\r\n                        <td>{this.state.volume}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n            </Card>\r\n        </Col>\r\n        return ( \r\n        <div>\r\n            <div className=\"gallery\">\r\n            <Container>\r\n                {exchangeCardInfo}\r\n            </Container>\r\n          </div>\r\n        </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        axios.get(`http://api.marketstack.com/v1/intraday/${getCurrentDate(0)}?access_key=43d9fceee09a8d4b8113b69f9214c110&symbols=${this.state.symbol}&interval=15min`)\r\n            .then( (res) => {\r\n              console.log('res.data.dataToday', res.data.data)\r\n              if(res.data.data.length === 0){\r\n                axios.get(`http://api.marketstack.com/v1/intraday/${getCurrentDate(-1)}?access_key=43d9fceee09a8d4b8113b69f9214c110&symbols=${this.state.symbol}&interval=15min`)\r\n                    .then( (res) => {\r\n                      const open = res.data.data[0].open;\r\n                const high =res.data.data[0].high;\r\n                const low =res.data.data[0].low;\r\n                const close =res.data.data[0].close;\r\n                const volume =res.data.data[0].volume;\r\n                const last1 = res.data.data[0].last;\r\n                const last = res.data.data.map( (item) => {\r\n                    return item.last;\r\n                })\r\n                console.log('last', last)\r\n                this.setState({\r\n                    last1: last1,\r\n                    last: last,\r\n                    open: open, \r\n                    close: close, \r\n                    high: high, \r\n                    low: low, \r\n                    volume: volume,\r\n                    chartData: {\r\n                        labels: [calcDayHours(-8, 0), calcDayHours(-7, 0), calcDayHours(-6, 0), calcDayHours(-5, 0), calcDayHours(-4, 0), \r\n                            calcDayHours(-3, 0), calcDayHours(-2, 0), calcDayHours(-1, 0), calcDayHours(0, 0)],\r\n                        datasets: [\r\n                          {\r\n                            ...this.datasets,\r\n                            data: last.reverse()\r\n                          }\r\n                        ]\r\n                      }\r\n                    });\r\n                });\r\n              }\r\n                const open = res.data.data[0].open;\r\n                const high =res.data.data[0].high;\r\n                const low =res.data.data[0].low;\r\n                const close =res.data.data[0].close;\r\n                const volume =res.data.data[0].volume;\r\n                const last1 = res.data.data[0].last;\r\n                const last = res.data.data.map( (item) => {\r\n                    return item.last;\r\n                })\r\n                console.log('last', last)\r\n                this.setState({\r\n                    last1: last1,\r\n                    last: last,\r\n                    open: open, \r\n                    close: close, \r\n                    high: high, \r\n                    low: low, \r\n                    volume: volume,\r\n                    chartData: {\r\n                        labels: [calcDayHours(-8, 0), calcDayHours(-7, 0), calcDayHours(-6, 0), calcDayHours(-5, 0), calcDayHours(-4, 0), \r\n                            calcDayHours(-3, 0), calcDayHours(-2, 0), calcDayHours(-1, 0), calcDayHours(0, 0)],\r\n                        datasets: [\r\n                          {\r\n                            ...this.datasets,\r\n                            data: last.reverse()\r\n                          }\r\n                        ]\r\n                      }\r\n                });\r\n        })\r\n        .catch(err => {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        });\r\n        axios.get(`http://api.marketstack.com/v1/tickers/${this.state.symbol}?access_key=43d9fceee09a8d4b8113b69f9214c110`).then( (res) => {\r\n    \r\n          console.log('exchangeName', res.data.name)\r\n          this.setState({\r\n              name: res.data.name\r\n            });\r\n        });\r\n      };\r\n      dayChart = () => {\r\n        axios.get(`http://api.marketstack.com/v1/intraday/${getCurrentDate(0)}?access_key=43d9fceee09a8d4b8113b69f9214c110&symbols=${this.state.symbol}&interval=15min`)\r\n            .then( (res) => {\r\n                const last = res.data.data.map( (item) => {\r\n                    return item.last;\r\n                })\r\n                console.log('lastDay', last)\r\n                this.setState({\r\n                    last: last,\r\n                    chartData: {\r\n                        labels: [calcDayHours(-8, 0), calcDayHours(-7, -30),  calcDayHours(-7, 0), calcDayHours(-6, -30), calcDayHours(-6, 0), \r\n                          calcDayHours(-5, -30), calcDayHours(-5, 0), calcDayHours(-4, -30), calcDayHours(-4, 0), \r\n                            calcDayHours(-3, -30), calcDayHours(-3, 0), calcDayHours(-2, -30), calcDayHours(-2, 0), \r\n                            calcDayHours(-1, -30), calcDayHours(-1, 0), calcDayHours(0, -30), calcDayHours(0, 0)],\r\n                        datasets: [\r\n                          {\r\n                            ...this.datasets,\r\n                            data: last.reverse()\r\n                          }\r\n                        ]\r\n                      }\r\n                });\r\n        })\r\n        .catch(err => {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        });\r\n      };\r\n      weekChart = () => {\r\n        axios.get(`http://api.marketstack.com/v1/intraday?access_key=43d9fceee09a8d4b8113b69f9214c110&symbols=${this.state.symbol}&date_from=${getCurrentDate(-7)}&date_to=${getCurrentDate(0)}&interval=3hour`)\r\n            .then( (res) => {\r\n                const last = res.data.data.map( (item) => {\r\n                    return item.last;\r\n                })\r\n                console.log('lastWeek', last)\r\n                this.setState({\r\n                    last: last,\r\n                    chartData: {\r\n                        labels: [calcWeekDays(-7), calcWeekDays(-6), calcWeekDays(-5), calcWeekDays(-4), \r\n                                  calcWeekDays(-3), calcWeekDays(-2), calcWeekDays(-1)],\r\n                        datasets: [\r\n                          {\r\n                            ...this.datasets,\r\n                            data: last.reverse()\r\n                          }\r\n                        ]\r\n                      }\r\n                });\r\n        })\r\n        .catch(err => {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        });\r\n      };\r\n      monthChart = () => {\r\n        axios.get(`http://api.marketstack.com/v1/intraday?access_key=43d9fceee09a8d4b8113b69f9214c110&symbols=${this.state.symbol}&date_from=${getCurrentDate(-30)}&date_to=${getCurrentDate(0)}&interval=6hour`)\r\n            .then( (res) => {\r\n                const last = res.data.data.map( (item) => {\r\n                    return item.last;\r\n                })\r\n                console.log('lastMonth', last)\r\n                this.setState({\r\n                    last: last,\r\n                    chartData: {\r\n                        labels: [calcMonthDays(-27), calcMonthDays(-22), calcMonthDays(-17), calcMonthDays(-12), \r\n                                  calcMonthDays(-7), calcMonthDays(-2), calcMonthDays(5)],\r\n                        datasets: [\r\n                          {\r\n                            ...this.datasets,\r\n                            data: last.reverse()\r\n                          }\r\n                        ]\r\n                      }\r\n                });\r\n        })\r\n        .catch(err => {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        });\r\n      };\r\n      yearChart = () => {\r\n        axios.get(`http://api.marketstack.com/v1/intraday?access_key=43d9fceee09a8d4b8113b69f9214c110&symbols=${this.state.symbol}&date_from=${getCurrentDate(-365)}&date_to=${getCurrentDate(0)}&interval=6hour`)\r\n            .then( (res) => {\r\n                const last = res.data.data.map( (item) => {\r\n                    return item.last;\r\n                })\r\n                console.log('lastYear', last)\r\n                this.setState({\r\n                    last: last,\r\n                    chartData: {\r\n                        labels: [calcYearDays(-12, 0), '', '', '', '', '', '', '', '', '', '', '', '', calcYearDays(-10, 10), '', '', '', '', '', '', '', '', '', '', '', '',  \r\n                                calcYearDays(-8, 10), '', '', '', '', '', '', '', '', '', '', '', '', calcYearDays(-6, 10), '', '', '', '', '', '', '', '', '', '', '', '',  \r\n                                  calcYearDays(-4, 10), '', '', '', '', '', '', '', '', '', '', '', '', calcYearDays(-2, 10), '', '', '', '', '', '', '', '', '', '', '', '', \r\n                                  calcYearDays(0, 29)],\r\n                        datasets: [\r\n                          {\r\n                            ...this.datasets,\r\n                            data: last.reverse()\r\n                          }\r\n                        ]\r\n                      }\r\n                });\r\n        })\r\n        .catch(err => {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        });\r\n      };\r\n}\r\n\r\nexport default withRouter(TickerComp);\r\n/*\r\nconst calcDayHours = (offset) => {\r\n    let date = new Date();\r\n    let previousHour = new Date(date.setHours(date.getHours() + offset));\r\n    let time = new Date();\r\n    \r\n    return previousHour.toLocaleString('en-US', { hour: 'numeric', hour12: true })\r\n};\r\n// console.log('last', this.last)\r\nconst data = {\r\n    labels: [calcDayHours(0), calcDayHours(1), calcDayHours(2), calcDayHours(3), calcDayHours(4), \r\n        calcDayHours(5), calcDayHours(6), calcDayHours(7), calcDayHours(8)],\r\n    datasets: [\r\n      {\r\n        label: '',\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: [65, 59, 80, 81, 56, 55, 40]\r\n      }\r\n    ]\r\n  };\r\n  */","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\TickerBasic.js",["92","93","94","95"],"import React from 'react';\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './TickerCard.css';\r\n\r\nclass TickerBasic extends React.Component{\r\n    constructor(props){\r\n      super(props);\r\n      \r\n    }\r\n    calcChange = (last, close) => {\r\n        return (last/close*100 -100).toFixed(2);\r\n    };\r\n    render(){\r\n        let chng = this.calcChange(this.props.tickerClose, this.props.tickerOpen);\r\n        const tickerCardInfo = <Col xs={12} lg={3}>\r\n            <Card style={{ width: '26rem' }}>\r\n            <Card.Header as=\"h5\">\r\n                {this.props.tickerSymbol}\r\n                <p></p>\r\n                <Card.Text style={{ fontSize: '16px' }}>{this.props.tickerName}</Card.Text>\r\n                <Card.Header as=\"h4\">{this.props.tickerClose}\r\n                    <span style={{ paddingLeft: '3rem', fontSize: '16px' }}>{chng}%</span></Card.Header>\r\n                </Card.Header>\r\n                <Card.Body className=\"card-body\">\r\n                <Card.Text>Open<span style={{ paddingLeft: '5.5rem' }}>{this.props.tickerOpen}</span></Card.Text>\r\n                <Card.Text>Close<span style={{ paddingLeft: '5.5rem' }}>{this.props.tickerClose}</span></Card.Text>\r\n                <Card.Text>Day Range<span style={{ paddingLeft: '3.5rem' }}>{this.props.tickerLow} - {this.props.tickerHigh}</span></Card.Text>\r\n                <Card.Text>Volume<span style={{ paddingLeft: '4.7rem' }}>{this.props.tickerVolume}</span></Card.Text>\r\n                </Card.Body>\r\n        </Card>\r\n        </Col>\r\n\r\n        return ( \r\n        <div>\r\n            <div className=\"tickerInfo\">\r\n                {tickerCardInfo}\r\n          </div>\r\n          \r\n        </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default TickerBasic;","D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\utils\\handleTime.js",[],"D:\\MyDev\\frontend\\appleseeds\\lessons\\final project\\StockApp\\stockapp\\src\\components\\HomeView.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":8,"column":8,"nodeType":"102","messageId":"103","endLine":8,"endColumn":22},{"ruleId":"104","severity":1,"message":"105","line":20,"column":30,"nodeType":"106","messageId":"107","endLine":20,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":20,"column":66,"nodeType":"106","messageId":"107","endLine":20,"endColumn":68},{"ruleId":"108","severity":1,"message":"109","line":115,"column":69,"nodeType":"110","messageId":"111","endLine":115,"endColumn":71},{"ruleId":"100","severity":1,"message":"112","line":3,"column":23,"nodeType":"102","messageId":"103","endLine":3,"endColumn":26},{"ruleId":"100","severity":1,"message":"113","line":5,"column":10,"nodeType":"102","messageId":"103","endLine":5,"endColumn":18},{"ruleId":"100","severity":1,"message":"114","line":2,"column":10,"nodeType":"102","messageId":"103","endLine":2,"endColumn":16},{"ruleId":"100","severity":1,"message":"113","line":4,"column":10,"nodeType":"102","messageId":"103","endLine":4,"endColumn":18},{"ruleId":"100","severity":1,"message":"115","line":36,"column":15,"nodeType":"102","messageId":"103","endLine":36,"endColumn":28},{"ruleId":"100","severity":1,"message":"112","line":3,"column":34,"nodeType":"102","messageId":"103","endLine":3,"endColumn":37},{"ruleId":"100","severity":1,"message":"116","line":7,"column":10,"nodeType":"102","messageId":"103","endLine":7,"endColumn":24},{"ruleId":"100","severity":1,"message":"117","line":7,"column":26,"nodeType":"102","messageId":"103","endLine":7,"endColumn":38},{"ruleId":"100","severity":1,"message":"112","line":3,"column":34,"nodeType":"102","messageId":"103","endLine":3,"endColumn":37},{"ruleId":"100","severity":1,"message":"114","line":2,"column":10,"nodeType":"102","messageId":"103","endLine":2,"endColumn":16},{"ruleId":"100","severity":1,"message":"112","line":2,"column":23,"nodeType":"102","messageId":"103","endLine":2,"endColumn":26},{"ruleId":"100","severity":1,"message":"113","line":4,"column":10,"nodeType":"102","messageId":"103","endLine":4,"endColumn":18},{"ruleId":"118","severity":1,"message":"119","line":8,"column":5,"nodeType":"120","messageId":"121","endLine":11,"endColumn":6},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'StockappNavbar' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Row' is defined but never used.","'Redirect' is defined but never used.","'Button' is defined but never used.","'indexCardInfo' is assigned a value but never used.","'getCurrentDate' is defined but never used.","'calcDayHours' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]